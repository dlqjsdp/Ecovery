<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    NoticeMapper.xml
    공지사항 게시글에 대한 SQL Mapper 파일로, CRUD, 페이징, 검색, 조회수 증가 등 DB 연산을 정의함
    @author   : yukyeong
    @fileName : NoticeMapper.xml
    @since    : 250723
    @history
        - 250723 | yukyeong | 공지사항 목록, 단건 조회, 등록, 수정, 삭제 쿼리 작성
        - 250723 | yukyeong | 페이징 + 검색 목록 조회, 전체 개수 조회, 조회수 증가 쿼리 추가
-->

<mapper namespace="com.ecovery.mapper.NoticeMapper">

    <!--
        게시글 전체 목록 조회 쿼리
        · 대상 테이블 : notice (게시글), member (작성자)
        · 조인 방식 : INNER JOIN (member_id 기준)
        · 조회 컬럼 : 게시글 정보 + 작성자 닉네임
        · 용도 : 목록 화면 출력
    -->
    <select id="getList" resultType="com.ecovery.domain.NoticeVO">
        SELECT
            n.notice_id,
            n.member_id,
            n.title,
            n.content,
            n.view_count,
            n.created_at,
            n.updated_at,
            m.nickname
        FROM notice n
        JOIN member m ON n.member_id = m.member_id
    </select>

    <!--
        게시글 단건 조회 쿼리
        · 대상 테이블 : notice (게시글), member (작성자)
        · 조인 방식 : INNER JOIN (member_id 기준)
        · 조회 컬럼 : 게시글 정보 + 작성자 닉네임
        · 용도 : 상세 화면 조회
    -->
    <select id="read" resultType="com.ecovery.domain.NoticeVO">
        SELECT
            n.notice_id,
            n.member_id,
            n.title,
            n.content,
            n.view_count,
            n.created_at,
            n.updated_at,
            m.nickname
        FROM notice n
        JOIN member m ON n.member_id = m.member_id
        WHERE n.notice_id = #{noticeId}
    </select>


    <!--
        게시글 등록 쿼리
        · 대상 테이블 : notice
        · 입력 컬럼 : member_id, title, content
        · 용도 : 신규 게시글 저장
    -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="noticeId">
        INSERT Into notice (
                         member_id,
                         title,
                         content
        ) values (
                  #{memberId},
                  #{title},
                  #{content}
                         )
    </insert>


    <!--
    게시글 삭제 쿼리
    · 대상 테이블 : notice
    · 조건 : noticeId (PK)
    · 용도 : 게시글 1건 삭제
    -->
    <delete id="delete">
        DELETE FROM notice
        WHERE notice_id = #{noticeId}
    </delete>


    <!--
    게시글 수정 쿼리
    · 대상 테이블 : notice
    · 수정 컬럼 : title, content, updated_at
    · 조건 : notice_id (PK)
    · 용도 : 게시글 내용 수정
    -->
    <update id="update">
        UPDATE notice
        SET
            title = #{title},
            content = #{content}
        WHERE notice_id = #{noticeId}
    </update>


    <!--
        게시글 목록 조회 (페이징 + 검색) 쿼리
        · 대상 테이블 : notice (게시글), member (작성자)
        · 조인 방식 : INNER JOIN (notice.member_id = member.member_id)
        · 조회 컬럼 : 게시글 정보 + 작성자 닉네임
        · 검색 조건 : type 값에 따라 다음 중 선택
             - T   : 제목으로 검색
             - C   : 내용으로 검색
             - W   : 작성자 닉네임으로 검색
             - TCW : 제목+내용+작성자 닉네임 모두 검색
             - 그 외 : 제목+내용+작성자 닉네임 모두 검색
        · 페이징 처리 : LIMIT #{amount} OFFSET #{offset}
        · 용도 : 게시글 목록 화면 출력 + 검색 + 페이징
    -->

    <!-- 검색 조건 SQL 분리 -->
    <sql id="criteria">
        <where>
            <!-- keyword가 null이 아니고 공백이 아니면 조건문 실행 -->
            <if test="keyword != null and keyword.trim() != ''">
                <choose>
                    <when test="'T'.equals(type)">
                        n.title LIKE CONCAT('%', #{keyword}, '%')
                    </when>
                    <when test="'C'.equals(type)">
                        n.content LIKE CONCAT('%', #{keyword}, '%')
                    </when>
                    <when test="'W'.equals(type)">
                        m.nickname LIKE CONCAT('%', #{keyword}, '%')
                    </when>
                    <when test="'TCW'.equals(type)">
                        (
                        n.title LIKE CONCAT('%', #{keyword}, '%')
                        OR n.content LIKE CONCAT('%', #{keyword}, '%')
                        OR m.nickname LIKE CONCAT('%', #{keyword}, '%')
                        )
                    </when>
                    <!-- 그 외의 경우도 제목/내용/작성자 모두 검색 -->
                    <otherwise>
                        (
                        n.title LIKE CONCAT('%', #{keyword}, '%')
                        OR n.content LIKE CONCAT('%', #{keyword}, '%')
                        OR m.nickname LIKE CONCAT('%', #{keyword}, '%')
                        )
                    </otherwise>
                </choose>
            </if>
        </where>
    </sql>

    <!-- 페이징 + 검색 목록 조회 -->
    <select id="getListWithPaging" parameterType="com.ecovery.dto.Criteria" resultType="com.ecovery.domain.NoticeVO">
        SELECT
            n.notice_id,
            n.member_id,
            n.title,
            n.content,
            n.view_count,
            n.created_at,
            n.updated_at,
            m.nickname
        FROM notice n
        JOIN member m ON n.member_id = m.member_id
        <include refid="criteria"/>
        ORDER BY n.notice_id DESC
        LIMIT #{amount}
        OFFSET #{offset}
    </select>


    <!--
        전체 게시글 개수 조회 쿼리 (검색 조건 포함)
        · 대상 테이블 : notice (게시글), member (작성자)
        · 조인 방식 : INNER JOIN (notice.member_id = member.member_id)
        · 조회 컬럼 : COUNT(*) (검색 조건에 해당하는 게시글 수)
        · 검색 조건 : 제목 / 내용 / 작성자 닉네임 (typeArr 배열로 구분)
        · 용도 : 총 게시글 개수 조회 (페이징 처리를 위한 총 페이지 계산)
    -->
    <!-- 전체 개수 조회 (검색 조건 포함) -->
    <select id="getTotalCount" parameterType="com.ecovery.dto.Criteria" resultType="int">
        SELECT COUNT(*)
        FROM notice n
        JOIN member m ON n.member_id = m.member_id
        <include refid="criteria"/>
    </select>


    <!--
        게시글 조회수 증가 쿼리
        · 대상 테이블 : notice (게시글)
        · 갱신 컬럼 : view_count (기존 값 +1)
        · 조건 : notice_id (PK)
        · 용도 : 게시글 상세 조회 시 조회수 1 증가
    -->
    <update id="updateViewCount">
        UPDATE notice
        SET view_count = view_count + 1
        WHERE notice_id = #{noticeId}
    </update>


</mapper>