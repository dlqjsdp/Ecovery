<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    MemberMapper.xml
    - com.ecovery.mapper.MemberMapper 인터페이스와 연결되는 MyBatis 매퍼 XML 파일
    - 회원(MemberVO) 관련 SQL 쿼리 정의
    @history
    - 250724 | yukyeong | 소셜 로그인 조회 쿼리(findBySocialId), provider 관련 필드 및 insert 쿼리 추가
-->

<mapper namespace="com.ecovery.mapper.MemberMapper">

    <!--
        resultMap: SQL 결과를 MemberVO 객체에 매핑하는 설정
        - 컬럼명과 자바 필드명이 다를 경우 사용 (예: created_at → createdAt)
        - ENUM(Role)도 기본 타입으로 처리 가능
    -->
    <resultMap id="memberMap" type="com.ecovery.domain.MemberVO">
        <id property="memberId" column="member_id"/>
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="nickname" column="nickname"/>
        <result property="role" column="role"/>
        <result property="createdAt" column="created_at"/>
        <result property="agreeOptional" column="agree_optional"/>
        <result property="provider" column="provider"/>
        <result property="providerId" column="provider_id"/>
    </resultMap>

    <!--
            회원 등록 쿼리
            - useGeneratedKeys: 자동 증가된 PK 값을 memberId에 주입
            - keyProperty는 VO의 필드명과 정확히 일치해야 함 (memberId)
            - ⚠ 오타 주의: 현재 memberid → memberId (대소문자 일치)
            - 소셜 회원 가입도 저장 가능하게 수정 (provider, provider_id 추가)
        -->
    <insert id="insertMember" parameterType="com.ecovery.domain.MemberVO" useGeneratedKeys="true" keyProperty="memberId">
        insert into member(
            email, password, nickname, role, created_at, agree_optional,
            provider, provider_id
        )
        values (
            #{email}, #{password}, #{nickname}, #{role}, #{createdAt}, #{agreeOptional},
            #{provider}, #{providerId}
        )
    </insert>

    <!--
        회원 정보 수정
        - 닉네임과 비밀번호만 변경 가능
        - memberId 기준으로 수정
    -->
    <update id="updateMember" parameterType="com.ecovery.domain.MemberVO">
        update member
        set nickname = #{nickname},
            password = #{password}
        where member_id = #{memberId}
    </update>

    <!--
        회원 번호(PK)로 조회
    -->
    <select id="findByMemberId" resultType="com.ecovery.domain.MemberVO">
        select * from member where member_id = #{memberId}
    </select>

    <!--
        이메일로 회원 조회
        - 로그인 등에서 사용
    -->
    <select id="findByEmail" resultType="com.ecovery.domain.MemberVO">
        select * from member where email = #{email}
    </select>

    <!--
        닉네임으로 회원 조회
        - 로그인 등에서 사용
    -->
    <select id="findByNickname" resultType="com.ecovery.domain.MemberVO">
        select * from member where nickname = #{nickname}
    </select>

    <!--
        전체 회원 목록 조회
        - resultMap으로 MemberVO 리스트 반환
    -->
    <select id="findAllMembers" resultType="com.ecovery.domain.MemberVO">
        select * from member
        <include refid="criteria"></include>
        LIMIT #{amount} OFFSET #{offset}
    </select>


    <!-- 마이페이지 닉네임, 포인트 조회 -->
    <select id="getMemberPage" resultType="com.ecovery.dto.MemberPageDto">
        select
            m.nickname, p.point
        from
            member m
        left join <!-- 회원은 있으나 포인트가 없을 수 있어 left join 사용 -->
            point p on m.member_id = p.member_id
        where
            m.member_id = #{memberId}
    </select>

    <!-- 마이페이지 포인트 전체 조회 -->
    <select id="getPointHistoryMemberById" parameterType="long" resultType="com.ecovery.domain.PointVO">
        select *
        from point_history
        where member_id = #{memberId}
        order by created_at desc
    </select>

    <!--
        소셜 로그인 사용자 조회
        - provider(로그인 방식)와 provider_id(소셜 사용자 고유 ID)로 조회
        - Kakao, Google 등 소셜 로그인 시 기존 회원 여부 확인
    -->
    <select id="findBySocialId" resultMap="memberMap">
        SELECT *
        FROM member
        WHERE provider = #{provider}
          AND provider_id = #{providerId}
    </select>

    <!-- 검색 조건(제목, 내용, 지역(구,동) -->
    <sql id="criteria">
        <where>
            <foreach collection="typeArr" item="type" separator="OR">
                <if test="type == 'E'">
                    email LIKE CONCAT('%', #{keyword}, '%')
                </if>
                <if test="type == 'N'">
                    nickname LIKE CONCAT('%', #{keyword}, '%')
                </if>
            </foreach>
        </where>
    </sql>

    <!-- 페이징 처리를 위한 전체 게시글 수를 조회 -->
    <select id="getTotalCount" parameterType="com.ecovery.dto.Criteria" resultType="int">
        SELECT COUNT(*)
        FROM member
        <where>
            <if test="type != null and keyword != null and keyword != ''">
                <include refid="criteria"></include>
            </if>
            member_id > 0 <!-- 항상 참인 기본 조건  : WHRER 문이 비어있을 때 대비용-->
        </where>
    </select>


</mapper>
